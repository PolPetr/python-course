# -*- coding: utf-8 -*-
"""Копия блокнота "3_regex_tutorial.ipynb"

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sUGpzDCiix5h1SylI2OrwFJrjLAjv-Pc

# Введение в регулярные выражения (RegEx)

## 1. Что такое регулярные выражения

**Регулярные выражения (RegEx)** — это язык описания шаблонов для поиска и обработки текста.

Они позволяют:
- искать слова, числа, символы по шаблону;
- извлекать нужные фрагменты текста;
- заменять или очищать данные.

В Python модуль для работы с RegEx называется **`re`**:

```python
import re
```

### Пример 1: простой поиск
```python
import re
text = 'Мой email: ivanov@mail.ru'
result = re.search('mail', text)
if result:
    print('Нашёл!')
```

## 2. Базовые символы и квантификаторы

| Символ | Значение |
|:-------|:----------|
| `\d` | Любая цифра (0–9) |
| `\w` | Любая буква, цифра или `_` |
| `\s` | Любой пробельный символ |
| `.` | Любой символ |
| `+` | Один или больше раз |
| `*` | Ноль или больше раз |
| `{n}` | Ровно `n` раз |
| `{m,n}` | От `m` до `n` раз |

> Шаблоны лучше писать как **сырые строки** — `r"шаблон"`, чтобы Python не интерпретировал обратные слэши.

## 3. Примеры шаблонов

- `r"\d+"` — последовательность из цифр (`42`, `2025`).
- `r"\w+@\w+\.\w+"` — простой шаблон для email.
- `r"\d{5}"` — ровно 5 цифр подряд.
- `r"[A-Z][a-z]+"` — слово с заглавной буквы.

**Пример задачи**

В тексте найдите все цены (после слова *цена* или знака `$`).
"""

import re

text = "Смартфон цена 29999 руб. Ноутбук $1500. Книга всего 499 рублей."
prices = re.findall(r"\d+", text)
print(prices)
assert "29999" in prices and "1500" in prices and "499" in prices

"""## 4. RegEx в задачах NLP

Регулярные выражения часто применяются для:

- **поиска сущностей** (email, номера телефонов, даты);
- **очистки текста** (удаление HTML, лишних знаков);
- **токенизации** (разделение текста на слова);
- **извлечения информации** (например, из логов или анкет).

**Пример**: очистка HTML-тегов
Удалим все HTML-теги из текста с помощью шаблона `<[^>]+>`
"""

import re

html_text = "<div>Привет, <b>мир</b>!</div>"
clean = re.sub(r"<[^>]+>", "", html_text)
print(clean)
assert clean.strip() == "Привет, мир!"

"""**Пример задачи**

Извлеките все email-адреса из текста лога.
"""

import re

log_text = """
2024-05-20 10:00:00 [ERROR] User ivanov_1990@domain.com: Connection timeout
2024-05-20 10:01:15 [INFO] User petrov-sergey@my-mail.org: Login successful
2024-05-20 10:02:30 [WARN] User support@company.com: Password change required
"""

emails = re.findall(r"\b[\w.-]+@[\w.-]+\.\w+\b", log_text)
print(emails)
assert len(emails) == 3

"""**Пример задачи**

Извлеките номера телефонов в формате `+7 (XXX) XXX-XX-XX` или `8-XXX-XXX-XX-XX`.
"""

import re

sample = "Контакты: +7 (912) 345-67-89, 8-912-345-67-89, старый формат 89123456789"
phones = re.findall(r"(?:\+7|8)[\s\-\(]*\d{3}[\)\s\-]*\d{3}[\s\-]*\d{2}[\s\-]*\d{2}", sample)
print(phones)
assert len(phones) >= 2

"""**Пример задачи**

Извлеките все URL из строки.
"""

import re

text = "Наш сайт: https://example.com и резервный http://backup.org/test"
urls = re.findall(r"https?://[\w./-]+", text)
print(urls)
assert "https://example.com" in urls and "http://backup.org/test" in urls

"""**Пример задачи**

Найдите даты формата `YYYY-MM-DD` или `DD.MM.YYYY`.
"""

import re

dates_text = "Встреча 2024-05-20 и отчёт 13.10.2025."
dates = re.findall(r"\d{4}-\d{2}-\d{2}|\d{2}\.\d{2}\.\d{4}", dates_text)
print(dates)
assert "2024-05-20" in dates and "13.10.2025" in dates

"""Темы, которые мы более подробно разберем на следующем занятии:
- паттерны для поиска и обработки текста
- `re.search`, `re.findall`, `re.sub`
- регулярные выражения для задач NLP и очистки данных
"""